/*

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non decreasing array.
-10^9 <= target <= 10^9

*/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        if(nums.length == 0 || nums == null)
            return new int[]{-1,-1};
        
        int res[]=new int[2];
        
        res[0]=binarySearchfromfirst(nums,0,nums.length-1,target);
        res[1]=binarySearchfromlast(nums,0,nums.length-1,target);
        
        return res;
        
    }
    public int binarySearchfromfirst(int []nums,int first,int last,int target)
    {
        while(first <= last)
        {
            int mid=first+(last-first)/2;
            
            if((mid == 0 || target > nums[mid-1])&& nums[mid] == target)
            {
                return mid;
            }
            else if(target > nums[mid])
            {
                first=mid+1;
            }
            else
            {
                last=mid-1;
            }
        }
        return -1;
    }
    public int binarySearchfromlast(int nums[],int first,int last,int target)
    {
        while(first <= last)
        {
            int mid=first+(last-first)/2;
            
            if((mid == nums.length-1 || target < nums[mid+1])&& nums[mid] == target)
            {
                return mid;
            }
            else if(target < nums[mid])
            {
                last=mid-1;
            }
            else
            {
                first=mid+1;
            }
        }
        return -1;
    }
}
