/*

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

You may assume no duplicate exists in the array.

Example 1:

Input: [3,4,5,1,2] 
Output: 1
Example 2:

Input: [4,5,6,7,0,1,2]
Output: 0

*/

class Solution {
    public int findMin(int[] nums) {
        /*if(nums.length == 0 || nums == null) return -1;
        int max=nums[0];
        int flag=0;
        for(int i=1;i<nums.length;i++){
            if(nums[i] < nums[i-1]){
                flag=i;
                break;
            }
            else
                continue;
        }
        if(flag == 0)
            return nums[0];
        else
            return nums[flag];*/
        
        if(nums.length == 1) return nums[0];
        
        int first=0,last=nums.length-1;
        
        //if last element is greater than there is no rotation
        
        if(nums[last] > nums[0])
            return nums[0];
        
        while(first <= last){
            int mid=first+(last-first)/2;
            if(nums[mid] > nums[mid+1])
                return nums[mid+1];
            if(nums[mid-1] > nums[mid])
                return nums[mid];
            //if mid is grater than nums[0] than rotation point is exist ahead of the mid
            if(nums[mid] > nums[0])
                first=mid+1;
            else
                last=mid-1;
            
        }
        return -1;
    }
}
