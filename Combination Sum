/*

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

*/

class Solution {
    List<List<Integer>> res=new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] nums, int target) {
        
        if(nums.length == 0 || nums == null)
            return res;
        Arrays.sort(nums);
        List<Integer> list=new ArrayList<>();
        printCombinations(nums,0,nums.length-1,target,0,list);
        return res;
    }
    public void printCombinations(int nums[],int first,int last,int target,int idx,List<Integer> list)
    {
        if(target == 0)
        {
            res.add(new ArrayList<>(list));
                return;
        }
        for(int i=idx;i<nums.length;i++)
        {
            if(nums[i] > target)
                break;
            list.add(nums[i]);
            printCombinations(nums,first,last,target-nums[i],i,list);
            list.remove(list.size()-1);
        }
    }
}
