/*

Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
     
        if(head == null || head.next == null) return head;
        
        ListNode slow=head;
        ListNode fast=head.next;
        // find mid
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        fast=slow.next;
        slow.next=null;
        
        slow=sortList(head);
        fast=sortList(fast);
        
        return mergeSort(slow,fast);//based on address
    }
    public ListNode mergeSort(ListNode slow,ListNode fast){
        ListNode dummy=new ListNode(0);
        
        ListNode curr=dummy;
        
        while(slow!=null && fast!=null){
            if(slow.val <= fast.val){
                curr.next=slow;
                slow=slow.next;
            }
            else{
                curr.next=fast;
                fast=fast.next;
            }
            curr=curr.next;
        }
        if(slow!=null)
            curr.next=slow;
        if(fast!=null)
            curr.next=fast;
        return dummy.next;
    }
}
