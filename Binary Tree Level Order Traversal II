/*

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        List<List<Integer>> res=new ArrayList<>();
        
        if(root == null)
            return res;
        int height=findHeight(root);
        Map<Integer,List<Integer>> hs=new LinkedHashMap<>();
        for(int i=0;i<height;i++)
        {
            printVal(root,i,i,hs);
        }
        
        for(List<Integer> list:hs.values())
        {
            res.add(list);
        }
        Collections.reverse(res);
        return res;
    }
    public void printVal(TreeNode root,int i,int track,Map<Integer,List<Integer>> hs)
    {
        if(root == null)
            return;
        if(i == 0)
        {
            if(!hs.containsKey(track))
            {
                List<Integer> list=new ArrayList<>();
                hs.put(track,list);
            }
            hs.get(track).add(root.val);
            return;
        }
        printVal(root.left,i-1,track,hs);
        printVal(root.right,i-1,track,hs);
            
    }
    public int findHeight(TreeNode root)
    {
        if(root == null)
            return 0;
        int left=findHeight(root.left);
        int right=findHeight(root.right);
        
        return (left > right)?left+1:right+1;
    }
}
