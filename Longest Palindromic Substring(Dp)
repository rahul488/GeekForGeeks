/*

Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

*/

class Solution {
    public String longestPalindrome(String s) {
        
        if(s == null || s.length() == 0) return s;
        int n=s.length();
        boolean dp[][]=new boolean[n][n];
        
        /*   Bottom up approach  */
        
        int strt=0,maxlen=0;
        
        //for length 1
        
        for(int i=0;i<n;i++){
            dp[i][i]=true;
            maxlen=1;
        }
        
        //for length 2
        
        for(int i=0;i<n-1;i++){
            if(s.charAt(i) == s.charAt(i+1)){
                dp[i][i+1]=true;
                strt=i;
                maxlen=2;
            }
        }
        
        //for length >=3
        
        for(int i=3;i<=n;i++){
            for(int j=0;j<n-i+1;j++){
                int k=i+j-1;
                
                if(s.charAt(k) == s.charAt(j) && dp[j+1][k-1] == true){
                    dp[j][k]=true;
                    if(i > maxlen){
                        maxlen=i;
                        strt=j;
                    }
                }
            }
        }
        return s.substring(strt,strt+maxlen-1+1);
    }
}
