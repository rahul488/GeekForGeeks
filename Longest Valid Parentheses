/*

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"
Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"

*/

class Solution {
    public int longestValidParentheses(String s) {
        
        if(s == null || s.length() == 0) return 0;
        
        Stack<Integer> st=new Stack<>();
        
        int maxlen=0,last=-1,len=0;
        
        for(int i=0;i<s.length();i++){
            if(s.charAt(i) == '(')
                st.push(i);
            else{
                if(st.isEmpty()){
                    last=i;
                }
                else{
                    st.pop();
                    if(!st.isEmpty()){
                        len=i-st.peek();
                    }
                    else{
                        len=i-last;
                    }
                }
            }
            if(len > maxlen){
                maxlen=len;
            }
        }
        return maxlen; 
    }
}
