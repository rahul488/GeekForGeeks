/*

Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:

Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
 

Note:

1 <= k <= len(nums) <= 16.
0 < nums[i] < 10000.

*/

class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        
        if(nums.length < k) return false;
        
        int sum=0;
        
        for(int i=0;i<nums.length;i++)
            sum+=nums[i];
        if(k == 0 || sum%k!=0) return false;
        return dfs(nums,new boolean[nums.length],0,0,sum/k,k);
    }
    public boolean dfs(int[] nums,boolean[] visited,int strt,int curr,int target,int bucket){
        if(bucket == 1)
            return true;
        if(curr == target){
            return dfs(nums,visited,0,0,target,bucket-1);
        } 
        
        for(int i=strt;i<nums.length;i++){
            if(!visited[i]){
                visited[i]=true;
                if(dfs(nums,visited,i+1,curr+nums[i],target,bucket))
                  return true;
                visited[i]=false;
            }
        }
        return false;
    }
}



