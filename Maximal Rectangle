/*

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6

*/

class Solution {
    public int maximalRectangle(char[][] matrix) {
        
        if(matrix == null || matrix.length == 0) return 0;
        
        int dp[]=new int[matrix[0].length];
        int maxArea=-1;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j] == '0')
                    dp[j]=0;
                else
                dp[j]+=Integer.parseInt(String.valueOf(matrix[i][j]));
            }
            maxArea=Math.max(maxArea,findArea(dp));
        }
        return maxArea;
    }
    public int findArea(int[] heights){
       int maxArea=0,currArea=0,top;
        Stack<Integer> st=new Stack<>();
        int i=0;
        while(i < heights.length){
            if(st.isEmpty() || heights[st.peek()] <= heights[i])
                st.push(i++);
            else{
                top=st.pop();
                currArea=heights[top]*(st.isEmpty()?i:i-st.peek()-1);
                maxArea=Math.max(currArea,maxArea);
            }
        }
        while(!st.isEmpty()){
            top=st.pop();
            currArea=heights[top]*(st.isEmpty()?i:i-st.peek()-1);
            maxArea=Math.max(currArea,maxArea);
        }
        return maxArea;
    }
}
