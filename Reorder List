/*

Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.

*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        
        if(head == null || head.next == null)
            return;
      ListNode slow=head;
      ListNode fast=head;
      //finding middle//
      while(fast!=null && fast.next!=null){
          slow=slow.next;
          fast=fast.next.next;
      } 
      ListNode mid=reverse(slow);
      ListNode curr=head;
      
       while(curr!=null && mid!=null){
           ListNode next=curr.next;
           curr.next=mid;
           curr=next;
           next=mid.next;
           mid.next=curr;
           mid=next;
       }
      if(curr!=null)
          curr.next=null;
    }
    public ListNode reverse(ListNode slow){
        ListNode prev=null;
        ListNode next;
        
        while(slow!=null){
            next=slow.next;
            slow.next=prev;
            prev=slow;
            slow=next;
        }
        return prev;
    }
}
