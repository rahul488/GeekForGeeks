/*

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

*/

class Solution {
    List<List<String>> res=new ArrayList<>();
    public List<List<String>> partition(String s) {
        if(s.length() == 0 || s == null) return res;
        
        findSoln(s,new ArrayList<String>());
        return res;
    }
    public void findSoln(String s,List<String> list){
        if(s.length() == 0){
            res.add(new ArrayList<>(list));
            return ;
        }
        for(int i=0;i<s.length();i++){
            if(isPalindrome(s.substring(0,i+1))){
                list.add(s.substring(0,i+1));
                findSoln(s.substring(i+1),list);
                list.remove(list.size()-1);
            }
                
        }
    }
    public boolean isPalindrome(String s){
       int i=0,j=s.length()-1;
        while(i < j){
            if(s.charAt(i)!=s.charAt(j))
                return false;
            i++;
            j--;
        }
        return true;
    }
}
