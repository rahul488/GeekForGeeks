/*

Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.

Input:  
The first line of the input contains T denoting the number of testcases. The first line of the test case will be the size of array and second line will be the elements of the array.

Output: 
For each test case the output will be the majority element of the array. Output "-1" if no majority element is there in the array.

Constraints:
1 <= T<= 100
1 <= N <= 107
0 <= Ai <= 106

Example:
Input:
2
5
3 1 3 3 2
3
1 2 3

Output:
3
-1

Explanation:
Testcase 1: Since, 3 is present more than N/2 times, so it is the majority element.
 
*/

/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args)throws IOException {
		//code
		
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		
		int testCases=Integer.parseInt(br.readLine());
		
		while(testCases-->0)
		{
		    int size=Integer.parseInt(br.readLine());
		    
		    int ar[]=new int[size];
		    
		    String line=br.readLine();
		    int i=0;
		    
		    for(String s:line.split(" ")){
		        ar[i]=Integer.parseInt(s);
		        i++;
		    }
		    soln(ar);
		}
	}
	public static void soln(int ar[]){
	    Map<Integer,Integer> hs=new HashMap<>();
	    
	    for(int i=0;i<ar.length;i++){
	        if(!hs.containsKey(ar[i])){
	            hs.put(ar[i],1);
	        }
	        else{
	            int count=hs.get(ar[i]);
	            hs.put(ar[i],++count);
	        }
	    }
	    for(Integer i:hs.keySet()){
	        if(hs.get(i) > ar.length/2){
	            System.out.println(i);
	            return;
	        }
	    }
	     System.out.println("-1");
	}
}
