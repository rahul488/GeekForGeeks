/*

Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        
        if(head == null) return head;
        
       ListNode prev=null,curr=head;
        int count=1;
        
        while(count < m ){
            prev=curr;
            curr=curr.next;
            count++;
        }
        curr=reverse(curr,m,n);
        if(prev != null)
        {
          prev.next=curr;
            return head;
        }
        
        return curr;
    }
    public ListNode reverse(ListNode curr,int m,int n){
        
        ListNode prev=null,next,track=curr;
        
        while(m <= n){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
            m++;
        }
        track.next=curr;
        return prev;
    }
}
