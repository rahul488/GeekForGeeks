/*

In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u < v.

Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3
Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:
The size of the input 2D-array will be between 3 and 1000.
Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.

*/


class Solution {
     Map<Integer,List<Integer>> graph=new HashMap<>();
    public int[] findRedundantConnection(int[][] edges) {
        
        for(int []edge:edges){
            if(dfs(edge[0],edge[1],new HashSet<Integer>()))
                return edge;
            
           if(graph.get(edge[0]) == null)
               graph.put(edge[0],new ArrayList<Integer>());
            graph.get(edge[0]).add(edge[1]);
            
             if(graph.get(edge[1]) == null)
               graph.put(edge[1],new ArrayList<Integer>());
            graph.get(edge[1]).add(edge[0]);
        }
        return new int[0];
    }
    public boolean dfs(int src,int dest,HashSet<Integer> set){
        
        if(set.contains(src)) return false;
        
        set.add(src);
        if(src == dest) return true;
        
        for(int node:graph.getOrDefault(src,new ArrayList<>())){
            if(dfs(node,dest,set))
                return true;
        }
        return false;
    }
}


/***********Union Find***********/

class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        
        int []parent=new int[edges.length+1];
        
        for(int []edge:edges){
            
            int u=edge[0];
            int v=edge[1];
            
            int ParentOf_u=findParent(u,parent);
            int ParentOf_v=findParent(v,parent);
            
            if(ParentOf_u == ParentOf_v)
                return edge;
            parent[ParentOf_v]=ParentOf_u;
                
        }
        return new int[0];
        
    }
    public int findParent(int v,int[] parent){
        if(parent[v] == 0)
            parent[v]=v;
        if(parent[v]!=v)
            parent[v]=findParent(parent[v],parent);
        return parent[v];
    }
}










