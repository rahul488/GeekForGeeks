/*

Remove all elements from a linked list of integers that have value val.

Example:

Input:  1->2->6->3->4->5->6, val = 6
Output: 1->2->3->4->5

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if(head == null) return head;
        while(head!=null){
            if(head.val == val){
                head=head.next;
            }
            else
                break;
        }
        ListNode p=head;
        
        if(p == null) return null;
        
        while(p.next!=null){
            if(p.next.val == val){
                ListNode q=p.next;
                p.next=q.next;
            }
            else
            p=p.next;
        }
        return head;
    }
}



******************************
Logic-2
******************************
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        
        if(head == null)
        {
            return null;
        }
        ListNode temp=head;
        ListNode prev=null;
        
        while(temp!=null)
        {
            if(temp.val == val)
            {
                if(prev == null)
                {
                    head=temp.next;
                    temp=temp.next;
                    continue;
                }
                else
                {
                    prev.next=temp.next;
                    temp=temp.next;
                }
            }
            else
            {
             prev=temp;
             temp=temp.next;
            }
        }
        return head;
    }
}
