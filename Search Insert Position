/*

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0

*/

class Solution {
    public int searchInsert(int[] nums, int target) {
        
        int idx=binarySearch(nums,0,nums.length-1,target);
        
        if(idx > Integer.MIN_VALUE)
            return idx;
        else
            return findIndx(nums,0,nums.length-1,target);
    }
    
    public int binarySearch(int[] nums,int first,int last,int target)
    {
        while(first <= last)
        {
            int mid=(first+last)/2;
            
            if(nums[mid] == target)
                return mid;
            else if(target > nums[mid])
                first=mid+1;
            else
                last=mid-1;
        }
        return Integer.MIN_VALUE;
    }
    public int findIndx(int []nums,int first,int last,int target)
    {
        while(first <= last)
        {
            int mid=(first+last)/2;
            
            if((mid == 0 || target > nums[mid-1]) && target < nums[mid])
                return mid;
            else if((mid == nums.length-1 || target < nums[mid+1]) && target > nums[mid])
                return mid+1;
            else if(target > nums[mid])
                first=mid+1;
            else
                last=mid-1;
        }
        return -1;
    }
    
}
